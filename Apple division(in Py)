# This is my equivalent python code for the problem, but it will get TLE as python is a slower language
# For this there is a solution with bitwise operation in python after this solution

SOLUTION-01:-
n = int(input()) # taking number of apples
a = list(map(int, input().split())) # taking weight of the apples

choice = [] # declaring a list to store choices of apple taking to another group

def generate(zeros, ones, permutation, n): # generating all permutations of 0s and 1s where 1 reprents the taking the apple
    if (n == len(permutation)):
        choice.append(permutation)
        return
    if (ones > zeros):
        generate(zeros+1, ones, permutation+"0", n)

    generate(zeros, ones+1, permutation+"1", n)

permutation = "" # taking a null string to append and store the choice
generate(0, 0, permutation, n) # calling the function to generate and store choice

# From here the actual code begins
total = sum(a)
current = 0
ans = (10**9) * 20

for i in choice:
    choice_list = list(i) # taking the choice string as a list to work with individual choices
    for j in range(0, n):
        current += a[j]*int(choice_list[j]) # multiplying the weights with the choice to get the sum with or without them
    s = abs((total - current) - current) # getting the weight with taking the chosen apples and then subtracting their sum from current
    ans = min(ans, s) # storing minimum ans for every choice
    current = 0 # clearing the current sum

print(ans) # printing output









SOLUTION-02:-
n = int(input())
a = list(map(int, input().split()))

ans = 10**9 + 20

total = sum(a)

for i in range(1<<n): # 1<<n is equivalent to 2**n
    s = 0
    for j in range(n):
        if i & 1<<j != 0:
            s += a[j]
    current = abs((total - s) - s)
    ans = min(ans, current)

print(ans)
